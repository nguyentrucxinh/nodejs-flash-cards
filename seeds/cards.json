[
	{
        "type": 1,
        "front": "# JavaScript Interview Prep Practice Problems",
        "back": "#",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 02 - Triple Add Function\r\n\r\n## Question\r\n\r\n```js\r\ntripleAdd(10)(20)(30) \/\/ returns 60\r\n```",
        "back": "## Solution\r\n\r\n```js\r\nfunction tripleAdd(num1) {\r\n    return function(num2) {\r\n        return function(num3) {\r\n            return num1 + num2 + num2\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```js\r\nfunction quadrupleAdd(num1) {\r\n    return function(num2) {\r\n        return function(num3, num4) {\r\n            return num1 + num2 + num3 + num4\r\n        }\r\n    }\r\n}\r\n\r\nquadrupleAdd(10)(20)(30, 40)\r\n```\r\n",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 03 - Working with IIFEs",
        "back": "## Question & Solution\r\n \r\n1. What is an IIFE and why are they used?\r\n\r\n- IIFE: Immediately Invoked Function Expression\r\n- A function that is excuted right after it is created\r\n\r\n2. Code out an example IIFE that functions properly.\r\n\r\n```js\r\n(function doubleNumber(num) {\r\n    return num * 2\r\n})(10)\r\n\/\/ 20\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 04 - Button 5\r\n\r\n## Question\r\n\r\n```js\r\nfunction createButtons() {\r\n   for (var i = 1; i <= 5; i++) {\r\n     var body = document.getElementsByTagName(\"BODY\")[0];\r\n     var button = document.createElement(\"BUTTON\");\r\n     button.innerHTML = 'Button ' + i;\r\n     button.onclick = function() {\r\n          alert('This is button ' + i);\r\n     }\r\n     body.appendChild(button);\r\n   }\r\n}\r\n\r\ncreateButtons();\r\n\/\/ This is button 6\r\n```",
        "back": "# Solution\r\n\r\n- Use IIFE (private scope) to fix\r\n\r\n```js\r\n\/\/ Solution 1:\r\nfunction createButtons() {\r\n   for (var i = 1; i <= 5; i++) {\r\n     var body = document.getElementsByTagName(\"BODY\")[0];\r\n     var button = document.createElement(\"BUTTON\");\r\n     button.innerHTML = 'Button ' + i;\r\n     (function(num) {\r\n       button.onclick = function() {\r\n          alert('This is button ' + num);\r\n       }\r\n     })(i);\r\n     body.appendChild(button);\r\n   }\r\n}\r\n\r\ncreateButtons();\r\n\r\n\/\/ Solution 2:\r\nfunction createButtons() {\r\n   for (var i = 1; i <= 5; i++) {\r\n     var body = document.getElementsByTagName(\"BODY\")[0];\r\n     var button = document.createElement(\"BUTTON\");\r\n     button.innerHTML = 'Button ' + i;     \r\n     addClickFunctionality(button, i);\r\n     body.appendChild(button);\r\n   }\r\n}\r\n\r\nfunction addClickFunctionality(button, num) {\r\n  button.onclick = function() {\r\n    alert('This is button ' + num);\r\n  }\r\n}\r\n\r\ncreateButtons();\r\n\r\n\/\/ Solution 3:\r\nfunction createButtons() {\r\n   for (let i = 1; i <= 5; i++) {\r\n     var body = document.getElementsByTagName(\"BODY\")[0];\r\n     var button = document.createElement(\"BUTTON\");\r\n     button.innerHTML = 'Button ' + i;\r\n     button.onclick = function() {\r\n          alert('This is button ' + i);\r\n     }\r\n     body.appendChild(button);\r\n   }\r\n}\r\n\r\ncreateButtons();\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 05 - Closures\r\n\r\n## Question\r\n\r\n- What is a `closure`?\r\n- Code out an example closure that functions properly.",
        "back": "## Solution\r\n\r\n- A `closure` is an inner function that has access to **scope** of an enclosing function\r\n\r\n- A closure has access to **variables** in 3 separate scopes:\r\n1. Variables in its own scope\r\n2. Variables in the scope of the outer function\r\n3. Variables in the global scope\r\n\r\n- The closure also has access to:\r\n1. Its own **parameters**\r\n2. **Parameters** of outer function(s)\r\n\r\n```js\r\nconst globalVariable = 'global var';\r\n\r\nfunction outterFunc(param1) {\r\n  const variable1 = 'var one';\r\n  \r\n  function innerFunc(param2) {\r\n    const variable2 = 'var two';\r\n    \r\n    console.log('globalVariable: ', globalVariable);\r\n    console.log('variable1: ', variable1);\r\n    console.log('variable2: ', variable2);\r\n    console.log('param1: ', param1);\r\n    console.log('param2: ', param2);\r\n  }\r\n  \r\n  innerFunc('param one');\r\n}\r\n\r\noutterFunc('param two');\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 06 - The `this` keyword\r\n\r\n## Question\r\n\r\n- What is the `this` keyworkd and how is it used?",
        "back": "## Solution\r\n\r\n```js\r\nvar house = {\r\n    price: 100000,\r\n    squareFeet: 2000,\r\n    owner: 'Taylor',\r\n    getPricePerSquareFoot: function() {\r\n        return this.price \/ this.squareFeet;\r\n    }\r\n};\r\n\r\nconsole.log(house.price); \/\/ 100000\r\nconsole.log(house.getPricePerSquareFoot()); \/\/ 50\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 07 - Hoisting in JavaScript\r\n\r\n## Question\r\n\r\n- Variable and Function Hoisting ",
        "back": "# Solution\r\n\r\n```js\r\nconsole.log(color) \/\/ undefined\r\n\r\nvar color = 'blue'\r\n\r\nconsole.log(color) \/\/ blue\r\n\r\n\/\/ -> Will convert to\r\nvar color\r\n\r\nconsole.log(color) \/\/ undefined\r\n\r\ncolor = 'blue'\r\n\r\nconsole.log(color) \/\/ blue\r\n```\r\n\r\n```js\r\nconsole.log(getProduct(2, 3)) \/\/ getProduct is not a function\r\n\r\nvar getProduct = function(num1, num2) {\r\n    return num1 * num2\r\n}\r\n\r\n\/\/ -> Will convert to\r\nvar getProduct\r\n\r\nconsole.log(getProduct(2, 3)) \/\/ getProduct is not a function\r\n\r\ngetProduct = function(num1, num2) {\r\n    return num1 * num2\r\n}\r\n\r\nconsole.log(getProduct(2, 3)) \/\/ 6\r\n```\r\n\r\n```js\r\nconsole.log(getProduct(2, 3)) \/\/ 6\r\n\r\nfunction getProduct(num1, num2) {\r\n    return num1 * num2\r\n}\r\n```\r\n\r\n- `var` (function scoped)\r\n  + global scope\r\n  + function scope\r\n\r\n- const, let (block scoped)\r\n  + global scope\r\n  + function scope\r\n  + block scope (for loop, if else statement, while loop, ...)\r\n\r\n- Variables and functions are hoisted to the top of the scope that they are declared in.",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 08 - Scope & self\r\n\r\n## Question\r\n\r\n```js\r\nvar myCar = {\r\n    color: \"Blue\",\r\n    logColor: function() {\r\n        var self = this;\r\n        console.log(\"In logColor - this.color: \" + this.color);\r\n        console.log(\"In logColor - self.color: \" + self.color);\r\n        (function() {\r\n            console.log(\"In IIFE - this.color: \" + this.color);\r\n            console.log(\"In IIFE - self.color: \" + self.color);\r\n        })();\r\n    }\r\n};\r\n\r\nmyCar.logColor();\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ In logColor - this.color: Blue\r\n\/\/ In logColor - self.color: Blue\r\n\/\/ In IIFE - this.color: undefined\r\n\/\/ IN IIFE - self.color: Blue\r\n```\r\n\r\n```js\r\nthis.color = 'red'\r\n\r\nvar myCar = {\r\n    color: \"Blue\",\r\n    logColor: function() {\r\n        var self = this;\r\n        console.log(\"In logColor - this.color: \" + this.color);\r\n        console.log(\"In logColor - self.color: \" + self.color);\r\n        (function() {\r\n            console.log(\"In IIFE - this.color: \" + this.color);\r\n            console.log(\"In IIFE - self.color: \" + self.color);\r\n        })();\r\n    }\r\n};\r\n\r\nmyCar.logColor();\r\n\r\n\/\/ In logColor - this.color: Blue\r\n\/\/ In logColor - self.color: Blue\r\n\/\/ In IIFE - this.color: red\r\n\/\/ IN IIFE - self.color: Blue\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 09 - Equals vs Strict Equals\r\n\r\n## Question\r\n\r\n- What is the difference between the comparison operators `==` and `===` ?",
        "back": "## Solution\r\n\r\n- `==` (equals)\r\n  + tests for abstract equality\r\n  + does not test for data type\r\n\r\n- `===` (strict equals)\r\n  + tests for strict equality\r\n  + does test for data type\r\n\r\n```js\r\nconsole.log(7 == '7') \/\/ true\r\n\r\nconsole.log(7 === '7') \/\/ false\r\n```\r\n\r\n- What happens 'under the hood' when using `==` to compare:\r\n  \r\n- Comparing **number** & **string**\r\n  + string is converted to a number\r\n  + comparison is made\r\n\r\n- Comparing **boolean** & **non-boolean**\r\n  + non-boolean is converted to a boolean\r\n  + comparison is made\r\n\r\n- Comparing **object** & **primitive data-type**",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 10 - Log Number Function\r\n\r\n## Question\r\n\r\n```js\r\nvar num = 50;\r\n\r\nfunction logNumber() {\r\n    console.log(num);\r\n    var num = 100;\r\n}\r\n\r\nlogNumber();\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ undefined\r\n\r\n\/\/ -> Will convert to\r\nvar num = 50\r\n\r\nfunction logNumber() {\r\n    var num\r\n\r\n    console.log(num)\r\n    num = 100\r\n}\r\n\r\nlogNumber()\r\n```\r\n\r\n```js\r\nvar num = 50\r\n\r\nfunction logNumber() {\r\n    console.log(num) \/\/ 50\r\n}\r\n\r\nlogNumber()\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 11 - Use Strict\r\n\r\n## Question\r\n\r\n- What does using 'strict mode' do to your code?\r\n- What are the benefits of using 'strict mode'?",
        "back": "## Solution\r\n\r\n- Main purpose: Enforce stricter parsing and error handling in your code\r\n1. Prevents the use of global variables",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 12 - Curry Function\r\n\r\n## Question\r\n\r\n```js\r\nfunction getProduct(num1, num2) {\r\n    return num1 * num2\r\n}\r\n```",
        "back": "## Solution\r\n\r\n```js\r\nfunction getProduct(num1) {\r\n    return function(num2) {\r\n        return num1 * num2\r\n    }\r\n}\r\n\r\ngetProduct(10)(20)\r\n```\r\n\r\n```js\r\nfunction getTravelTime(distance, speed) {\r\n    return distance \/ speed\r\n}\r\n\r\nfunction getTravelTime(distance) {\r\n    return function(speed) {\r\n        return distance \/ speed\r\n    }\r\n}\r\n\r\nconst travelTimeBosNyc = getTravelTime(400)\r\n\r\nconsole.log(traveTimeBosNyc(40))\r\nconsole.log(traveTimeBosNyc(50))\r\nconsole.log(traveTimeBosNyc(60))\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 13 - Counter Function\r\n\r\n## Question\r\n\r\n- Write a function that keeps track of how many times it was called and returns that number\r\n- All functionality should be inside of the function - none outside",
        "back": "```js\r\nfunction myFunc() {\r\n  let count = 0;\r\n  \r\n  return function() {\r\n    count++;\r\n    return count;\r\n  };\r\n}\r\n\r\nconsole.log(myFunc()); \/\/ [Function]\r\n\r\nconst instanceOne = myFunc();\r\nconst instanceTwo = myFunc();\r\n\r\nconsole.log('instanceOne: ', instanceOne()); \/\/ 1\r\nconsole.log('instanceOne: ', instanceOne()); \/\/ 2\r\nconsole.log('instanceOne: ', instanceOne()); \/\/ 3\r\nconsole.log('instanceTwo: ', instanceTwo()); \/\/ 1\r\nconsole.log('instanceTwo: ', instanceTwo()); \/\/ 2\r\nconsole.log('instanceOne: ', instanceOne()); \/\/ 4\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 14 - Logging X and Y\r\n\r\n## Question\r\n\r\n```js\r\n(function() {\r\n    var x = y = 200\r\n})()\r\n\r\nconsole.log('y: ', y)\r\nconsole.log('x: ', x)\r\n```",
        "back": "# Solution\r\n\r\n```js\r\n\/\/ y: 200\r\n\/\/ x is not defined\r\n```\r\n\r\n- `x` is private scope of IIFE\r\n- `y` is global scope\r\n\r\n```js\r\n(function() {\r\n    \/\/ var x = y = 200\r\n    y = 200\r\n    var x = y\r\n})()\r\n\r\nconsole.log('y: ', y)\r\nconsole.log('x: ', x)\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 15 - Call & Apply Methods\r\n\r\n## Question\r\n\r\n- Describe the javascript `call()` and `apply()` methods\r\n1. How do they function?\r\n2. What arguments do they take?\r\n3. How are they different?",
        "back": "## Solution\r\n\r\n```js\r\nconst car1 = {\r\n  brand: 'Porsche',\r\n  getCarDescription: function(cost, year, color) {\r\n    console.log(`This car is a ${this.brand}. The price is $${cost}. The year is ${year}. The color is ${color}.\\n`);\r\n  }\r\n};\r\n\r\nconst car2 = {\r\n  brand: 'Lamborghini'\r\n};\r\n\r\nconst car3 = {\r\n  brand: 'Ford'\r\n};\r\n\r\ncar1.getCarDescription(80000, 2010, 'blue');\r\n\/\/ This car is Porsche. The price is $80000. The year is 2010. The color is blue\r\ncar1.getCarDescription.call(car2, 200000, 2013, 'yellow');\r\n\/\/ This car is a Lamborghini. The price is $200000. The year is 2013. The color is yellow.\r\ncar1.getCarDescription.apply(car3, [35000, 2012, 'black']);\r\n\/\/ The car is Ford. The price is $35000. The year is 2012. The color is black.\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 16 - Determine list2\r\n\r\n## Question\r\n\r\n```js\r\nconst list1 = [1, 2, 3, 4, 5]\r\nconst list2 = list1\r\nlist1.push(6, 7, 8)\r\n\r\nconsole.log(list2)\r\n```",
        "back": "# Solution\r\n\r\n```js\r\n\/\/ [1, 2, 3, 4, 5, 6, 7, 8]\r\n```\r\n\r\n```js\r\nconst list1 = [1, 2, 3, 4, 5]\r\nconst list2 = list1.slice()\r\n\/\/ const list2 = list1.concat([])\r\nlist1.push(6, 7, 8)\r\n\r\nconsole.log(list1) \/\/ [1, 2, 3, 4, 5, 6, 7, 8]\r\nconsole.log(list2) \/\/ [1, 2, 3, 4, 5]\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 17 - Singly or Doubly Invoked Function\r\n\r\n## Question\r\n\r\n```js\r\nfunction getTotal() {\r\n\r\n}\r\n\r\ngetTotal(10, 20)\r\ngetTotal(10)(20)\r\n```",
        "back": "## Solution\r\n\r\n```js\r\nfunction getTotal() {\r\n  var args = Array.prototype.slice.call(arguments);\r\n  \/\/ {0: 10, 1: 20}\r\n  \r\n  if (args.length === 2) {\r\n    return args[0] + args[1];\r\n  }\r\n  else if (args.length === 1) {\r\n    return function(num2) {\r\n      return args[0] + num2;\r\n    };\r\n  }\r\n}\r\n\r\nconsole.log(getTotal(10, 20));\r\nconsole.log(getTotal(5, 40));\r\nconsole.log(getTotal(3)(30));\r\nconsole.log(getTotal(8)(12));\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 18 - JSON Data\r\n\r\n## Question\r\n\r\n- Describe what JSON format is\r\n- Delete the data types not permitted in JSON\r\n- Replace placeholder-text with the corresponding data type, properly formatted as JSON\r\n\r\n```js\r\nconst myJsonObj = {\r\n  myString: [some string],\r\n  myNumber: [some number],\r\n  myNull: [null],\r\n  myBoolean: [false],\r\n  myUndefined: [undefined],\r\n  myArray: [some array],\r\n  myFunction: [some function],\r\n  myObject: [some object]\r\n};\r\n```",
        "back": "## Solution\r\n\r\n- JSON: JavaScript Object Notation\r\n- Light-weight format for transferring data\r\n- JSON is used because:\r\n  + It is easy for humans to understand\r\n  + It is easy for computers to parse & generate\r\n\r\n```js\r\nconst myJsonObj = {\r\n  \"myString\": \"hello world\",\r\n  \"myNumber\": 12345.6789,\r\n  \"myNull\": null,\r\n  \"myBoolean\": true,\r\n  \"myArray\": [20, 30, \"orange\"],\r\n  \"myObject\": {\r\n    \"name\": \"Sam\",\r\n    \"age\": 30\r\n  }\r\n};\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 19 - Order Logged Out\r\n\r\n## Question\r\n\r\n- What order are the numbers (1, 2, 3, 4) logged out in?\r\n\r\n```js\r\nfunction logNumbers() {\r\n  console.log(1); \r\n  setTimeout(function(){console.log(2)}, 1000); \r\n  setTimeout(function(){console.log(3)}, 0); \r\n  console.log(4);\r\n}\r\n\r\nlogNumbers();\r\n```",
        "back": "## Solution\r\n\r\n- 1, 4, 3, 2",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 20 - Making an Object\r\n\r\n## Question\r\n\r\n- List and describe 3 different ways of creating an object in javascript",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ object literal syntax\r\nconst myBoat = {\r\n    length: 24,\r\n    maxSpeed: 45,\r\n    passengers: 14,\r\n    getLength: function() {\r\n        return this.length\r\n    }\r\n}\r\n```\r\n\r\n```js\r\n\/\/ new keyword & Object constructor\r\nconst student = new Object()\r\n\r\nstudent.grade = 12\r\nstudent.gradePointAverage = 3.7\r\nstudent.classes = ['English', 'Algebra', 'Chemistry']\r\n\r\nstudent.getClasses = function() {\r\n    return this.classes\r\n}\r\n```\r\n\r\n```js\r\n\/\/ constructor function\r\nfunction Car(color, brand, year) {\r\n    this.color = color\r\n    this.brand = brand\r\n    this.year = year\r\n}\r\n\r\nCar.prototype.getColor = function() {\r\n    return this.color\r\n}\r\n\r\nconst carlysCar = new Car('blue', 'ferarri', 2015)\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 21 - Type of Data Types\r\n\r\n## Question\r\n\r\n- What is logged out for each console.log statement?\r\n\r\n```js\r\nconsole.log(typeof null)\r\nconsole.log(typeof undefined)\r\nconsole.log(typeof {})\r\nconsole.log(typeof [])\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ object\r\n\/\/ undefined\r\n\/\/ object\r\n\/\/ object\r\n\r\nArray.isArray([]) \/\/ true\r\nArray.isArray({}) \/\/ false\r\n\r\n[] instanceof Array \/\/ true\r\n{} instanceof Array \/\/ false\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 22 - Bind method\r\n\r\n## Question\r\n\r\n- Describe the `bind()` function method\r\n1. Describe how it works\r\n2. Explain the parameters that it takes\r\n3. Code out an example of how `bind()` is used",
        "back": "## Solution\r\n\r\n```js\r\nthis.distance = 10000\r\n\r\nconst roadTrip1 = {\r\n    distance: 3000,\r\n    getDistance: function() {\r\n        return this.distance\r\n    }\r\n}\r\n\r\nconst getTripDistance = roadTrip1.getDistance\r\n\r\ngetTripDistance() \/\/ 10000\r\n\r\n\/\/ Fix it\r\nconst getTripDistance = roadTrip1.getDistance.bind(roadTrip1)\r\n\r\ngetTripDistance() \/\/ 3000\r\n```\r\n\r\n```js\r\nthis.distance = 10000;\r\nconst roadTrip1 = {\r\n  distance: 3000,\r\n  getDistance: function(unit, caption) {\r\n    return this.distance + unit + caption;\r\n  }\r\n};\r\n\r\nconst roadTrip2 = {\r\n  distance: 5000\r\n};\r\n\r\nconst getTripDistance = roadTrip1.getDistance.bind(roadTrip2, 'km');\r\n\r\ngetTripDistance(' in total'); \/\/ 5000km in total\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 23 - Two Objects\r\n\r\n## Question\r\n\r\n```js\r\nconst user1 = {\r\n    name: 'Jordan',\r\n    age: 28\r\n}\r\n\r\nconst user2 = {\r\n    name: 'Jordan',\r\n    age: 28\r\n}\r\n\r\nconsole.log(user1 == user2)\r\nconsole.log(user1 === user2)\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ false\r\n\/\/ false\r\n```\r\n\r\n```js\r\nconst user1 = {\r\n    name: 'Jordan',\r\n    age: 28\r\n}\r\n\r\nconst user2 = user1\r\n\r\nconsole.log(user1 == user2) \/\/ true\r\nconsole.log(user1 === user2) \/\/ true\r\n```\r\n\r\n```js\r\nconsole.log(JSON.stringify(user1) === JSON.stringify(user2)) \/\/ true\r\n\r\nconsole.log([] == []) \/\/ false\r\nconsole.log(JSON.stringify([]) === JSON.stringify([])) \/\/ true\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 24 - Array Constructor\r\n\r\n## Question\r\n\r\n```js\r\nvar arr1 = []\r\nvar arr2 = new Array(50)\r\nvar arr3 = new Array(1, 2, 'three', 4, 'five')\r\nvar arr4 = new Array([1, 2, 3, 4, 5])\r\n\r\nconsole.log('arr1: ', arr1);\r\nconsole.log('arr2: ', arr2);\r\nconsole.log('arr3: ', arr3);\r\nconsole.log('arr4: ', arr4);\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ arr1: []\r\n\/\/ arr2: [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]\r\n\/\/ arr3: [1, 2, 'three', 4, 'five']\r\n\/\/ arr4: [[1, 2, 3, 4, 5]]\r\n```\r\n\r\n- Array Constructor Function\r\n  + Single argument (**number**) -> return empty array of that length\r\n  + Single argument (**non-number**) -> returns array with just that argument passed as an element\r\n  + **Multiple** arguments passed -> returns new array with all arguments passed in as element in it",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 25 - Array IndexOf\r\n\r\n## Question\r\n\r\n```js\r\nconsole.log([10, 20, 30, 40, 50].indexOf(30));\r\nconsole.log([{ name: 'Pam' }, { name: 'Kent' }].indexOf({ name: 'Kent' }));\r\nconsole.log('hello world'.indexOf('o'));\r\nconsole.log([[1], [2], [3], [4]].indexOf([2]));\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ 2\r\n\/\/ -1\r\n\/\/ 4\r\n\/\/ -1\r\n```\r\n\r\n```js\r\nconst myArray = [5]\r\nconst anotherArray = myArray\r\n\r\nconsole.log([[1], [2], [3], [4], myArray].indexOf(anotherArray)); \/\/ 4\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 26 - Equivalent Numbers\r\n\r\n## Question\r\n\r\n```js\r\nconsole.log(900.9 === 3 * 300.3)\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ false\r\n\r\nconsole.log(3 * 300.3) \/\/ 900.9000000001\r\n\r\nNumber((3 * 300.3).toFixed(2)) \/\/ 900.9\r\n\r\nNumber((3 * 300.3).toPrecision(12)) \/\/ 900.9\r\n\r\n((3 * 300.3) * 3) \/ 10 \/\/ 900.9\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 27 - Objects & Strings\r\n\r\n## Question\r\n\r\n```js\r\n\/\/ #1\r\nvar string1 = 'Tampa';\r\nvar string2 = string1;\r\nstring1 = 'Venice';\r\n\r\nconsole.log(string2);\r\n\r\n\/\/ #2\r\nvar person1 = {\r\n  name: 'Alex',\r\n  age: 30\r\n};\r\n\r\nvar person2 = person1;\r\n\r\nperson2.name = 'Kyle';\r\n\r\nconsole.log(person1);\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ Tampa\r\n\/\/ {name: 'Kyle', age: 30}\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 28 - Strings & Arrays\r\n\r\n## Question\r\n\r\n```js\r\nconst data1 = 'Jordan Smith'\r\n\r\nconst data2 = [].filter.call(data1, function(elem, index) {\r\n    return index > 6\r\n})\r\n\r\nconsole.log(data2)\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ ['S', 'm', 'i', 't', 'h']\r\n```\r\n\r\n- only use 'read-only' methods: filter, forEach, map, some, every, ...\r\n- cannot use: push, pop, splice, shift, reverse, ...",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 29 - Object Properties\r\n\r\n## Question\r\n\r\n```js\r\nconst a = {}\r\nconst b = {name: 'b'}\r\nconst c = {name: 'c'}\r\n\r\na[b] = 200\r\na[c] = 400\r\n\r\nconsole.log(a[b])\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ 400\r\n```\r\n\r\n```js\r\nconst a = {};\r\nconst b = { name: 'b' };\r\nconst c = { name: 'c' };\r\n\r\na[b] = 200;\r\n\/\/ a['[object Object]'] = 200\r\n\r\na[c] = 400;\r\n\/\/ a['[object Object]'] = 400\r\n\r\nconsole.log(a[b]);\r\n\/\/ console.log(a['[object Object]']);\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 30 - X & Y\r\n\r\n## Question\r\n\r\n```js\r\nvar x = 10;\r\n\r\nfunction y() {\r\n    x = 100;\r\n    return;\r\n    function x() {}\r\n}\r\n\r\ny();\r\n\r\nconsole.log(x);\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ 10\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 31 - Withdraw From Account\r\n\r\n## Question\r\n\r\n```js\r\nconst account1 = {\r\n  name: 'Jen',\r\n  totalAmount: 5000,\r\n  deductAmount: function(amount) {\r\n    this.totalAmount -= amount;\r\n    return 'Amount in account: ' + this.totalAmount;\r\n  },\r\n};\r\n\r\nconst account2 = {\r\n  name: 'James',\r\n  totalAmount: 8000,\r\n};\r\n\r\nconst withdrawFromAccount = function(amount) {\r\n  return account1.deductAmount.bind(account2, amount);\r\n};\r\n\r\nconsole.log(withdrawFromAccount(500)());\r\nconsole.log(withdrawFromAccount(200)());\r\n```",
        "back": "## Solution\r\n\r\n```js\r\n\/\/ Amount in acocunt: 7500\r\n\/\/ Amount in acocunt: 7300\r\n```",
        "known": 0
    },
    {
        "type": 1,
        "front": "# Learning algorithms in javascript from scratch",
        "back": "#",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 02 - FizzBuzz",
        "back": "```javascript\r\nfunction fizzBuzz(num) {\r\n    for (var i = 1; i <= num; i ++) {\r\n        if (i % 15 === 0) console.log('FizzBuzz')\r\n        else if (i % 3 === 0) console.log('Fizz')\r\n        else if (i % 5 === 0) console.log('Buzz')\r\n        else console.log(i)\r\n    }\r\n}\r\n\r\nfizzBuzz()\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 03 - Harmless Ransom Note",
        "back": "```javascript\r\nfunction harmlessRansomNote(noteText, magazineText) {\r\n    var noteArr = noteText.split(' ')\r\n    var magazineArr = maganizeText.split(' ')\r\n    var magazineObj = {}\r\n\r\n    magazineArr.forEach(word => {\r\n        if (!magazineObj[word]) magazineObj[word] = 0\r\n        magazineObj[word]++\r\n    })\r\n\r\n    var noteIsPossible = true\r\n    noteArr.forEach(word => {\r\n        if (magazineObj[word]) {\r\n            magazineObj[word]--\r\n            if (magazineObj[word] < 0) noteIsPossible = false\r\n        }\r\n        else noteIsPossible = false\r\n    })\r\n\r\n    return noteIsPossible\r\n}\r\n\r\nharmlessRansomNote('', '')\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 04 - Is Palindrome",
        "back": "```javascript\r\nfunction isPalindrome(string) {\r\n    string = string.toLowercase()\r\n    var charactersArr = string.split('')\r\n    var validChracters = 'abcdefghijklmnopqrstuvwxyz'.spit('')\r\n\r\n    var lettersArr = []\r\n    charactersArr.forEach(char => {\r\n        if (validCharacters.indexOf(char) > -1) lettersArr.push(char)\r\n    })\r\n\r\n    if (lettersArr.join('') === lettersArr.reverse().join('')) return true\r\n    else return false\r\n}\r\n\r\nisPalindrome('Madam I\\'m adam') \/\/ true\r\nisPalindrome('race car') \/\/ true\r\nisPalindrome('Coding JavaScript') \/\/ false\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 05 - Caesar Cipher",
        "back": "```javascript\r\nfunction caesarCipher(str, num) {\r\n    num = num % 26\r\n    var lowerCaseString = str.toLowerCase()\r\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\r\n    var newString = ''\r\n\r\n    for (var i = 0; i < lowerCaseString.length; i++) {\r\n        var currentLetter = lowerCaseString[i]\r\n        if (currentLetter === ' ') {\r\n            newString += currentLetter\r\n            continue\r\n        }\r\n        var currentIndex = alphabet.indexOf(currentLetter)\r\n        var newIndex = currentIndex + num\r\n        if (newIndex > 25) index = index - 26\r\n        if (newIndex < 0) newIndex = 26 + newIndex\r\n        if (str[i] === str[i].toUpperCase()) {\r\n            newString += alphabet[newIndex].toUpperCase()\r\n        }\r\n        else newString += alphabet[newIndex]\r\n    }\r\n\r\n    return newString\r\n}\r\n\r\ncaesarCipher('Zoo Keeper', 2) \/\/ Bqq Mggrgt\r\n\r\ncaesarCipher('Big Cat', -16) \/\/ Lsq Mkb\r\n\r\ncaesarCipher('Javascript', -16) \/\/ Tkfkcmbszd\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 06 - Reverse Words\r\n\r\n## Question\r\n\r\n```javascript\r\nfunction reverseWords(string) {\r\n    \/\/ reverse every word in the string\r\n    \/\/ return the new string\r\n}\r\n```",
        "back": "## Solution\r\n\r\n```javascript\r\nfunction reverseWords(string) {\r\n    var wordsArr = string.split(' ')\r\n    var reversedWordsArr = []\r\n\r\n    wordsArr.forEach(word => {\r\n        var reversedWord = ''\r\n        for (var i = word.length - 1; i >= 0; i--) {\r\n            reversedWord += word[i]\r\n        }\r\n        reversedWordsArr.push(reversedWord)\r\n    })\r\n\r\n    return reversedWordsArr.join(' ')\r\n}\r\n\r\nreverseWords('this is a string of words')\r\n\/\/ siht si a gnirts fo sdrow\r\n\r\nreverseWords('Coding Javascript')\r\n\/\/ gnidoC tpircsavaJ\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 07 - Reverse Array In Place\r\n\r\n## Question\r\n\r\n```javascript\r\nfunction reversedArrayInPlace(arr) {\r\n    \/\/ reverse arr\r\n    \/\/ return reversed arr\r\n}\r\n```",
        "back": "## Solution\r\n\r\n```javascript\r\nfunction reverseArrayInPlace(arr) {\r\n    for (var i = 0; i < arr.length \/ 2; i++) {\r\n        var tempVar = arr[i]\r\n        arr[i] = arr[arr.length - 1 - i]\r\n        arr[arr.length - 1 - i] = tempVar\r\n    }\r\n    return arr\r\n}\r\n\r\nreverseArrayInPlace([1, 2, 3, 4, 5, 6])\r\n\/\/ [6, 5, 4, 3, 2, 1]\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 08 - Mean Median Mode",
        "back": "```javascript\r\nfunction meanMedianMode(array) {\r\n    return {\r\n        mean: getMean(array),\r\n        median: getMedian(array),\r\n        mode: getMode(array)\r\n    }\r\n}\r\n\r\nfunction getMean(array) {\r\n    var sum = 0\r\n\r\n    array.forEach(num => {\r\n        sum += num\r\n    })\r\n\r\n    var mean = sum \/ array.length\r\n    return mean\r\n}\r\n\r\nfunction getMedian(array) {\r\n    array.sort(function(a, b) {return a - b})\r\n    var median\r\n\r\n    if (array.length % 2 !== 0) {\r\n        median = array[Math.floor(array.length \/ 2)]\r\n    } else {\r\n        var mid1 = array[(array.length \/ 2) - 1]\r\n        var mid2 = array[array.length \/ 2]\r\n        median = (mid1 + mid2) \/ 2\r\n    }\r\n\r\n    return median\r\n}\r\n\r\nfunction getMode(array) {\r\n    var modeObj = {}\r\n\r\n    array.forEach(num => {\r\n        if (!modeObj[num]) modeObj[num] = 0\r\n        modeObj[num]++\r\n    })\r\n\r\n    var maxFrequency = 0\r\n    var modes = []\r\n    for (var num in modeObj) {\r\n        if (modeObj[num] > maxFrequency) {\r\n            modes = [ num ]\r\n            maxFrequency = modeObj[num]\r\n        }\r\n        else if (modeObj[num] === maxFrequency) modes.push(num)\r\n    }\r\n\r\n    if (modes.length === Object.keys(modeObj).length) modes = []\r\n    return modes\r\n}\r\n\r\nmeanMedianMode([1, 2, 3, 4, 5, 4, 6, 1])\r\n\/\/ { mean: 3.25, median: 3.5, mode: ['1', '4'] }\r\n\r\nmeanMedianMode([9, 10, 23, 10, 23, 9])\r\n\/\/ { mean: 14, median: 10, mode: [] }\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 09 - Two Sum\r\n\r\n## Question\r\n\r\n```javascript\r\nfunction twoSum(numArray, sum) {\r\n    \/\/ Returns every pair of numbers from 'numArray'\r\n    \/\/ that adds up to the 'sum'\r\n}\r\n\r\n\/\/ input: numArray = [1, 6, 4, 5, 3, 3], sum = 7\r\n\/\/ output: result = [[6, 1], [3, 4], [3, 4]]\r\n```",
        "back": "## Solution\r\n\r\n```javascript\r\nfunction twoSum(numArray, sum) {\r\n    var pairs = []\r\n    var hashtable = []\r\n\r\n    for (var i = 0; i < numArray.length; i++) {\r\n        var currNum = numArray[i]\r\n        var counterpart = sum - currNum\r\n        if (hashtable.indexOf(counterpart) !== -1) {\r\n            pairs.push([currNum, counterpart])\r\n        }\r\n        hashtable.push(currNum)\r\n    }\r\n\r\n    return pairs\r\n}\r\n\r\ntwoSum([1, 6, 4, 5, 3, 3], 7)\r\n\/\/ [[6, 1], [3, 4], [3, 4]]\r\n\r\ntwoSum([40, 11, 19, 17, -12], 28)\r\n\/\/ [[17, 11], [-12, 40]]\r\n```",
        "known": 0
    },
    {
        "type": 2,
        "front": "# 10 - Binary Search\r\n\r\n## Question\r\n\r\n```javascript\r\nfunction binarySearch(numArray, key) {\r\n\r\n}\r\n```\r\n\r\n- Binary Search:\r\n  + Search for a given value (key) inside of a list (numArray)\r\n  + Runs in O (log n) run time - very performant\r\n  + Can be written as a recursive function",
        "back": "",
        "known": 0
    },
    {
        "type": 2,
        "front": "",
        "back": "",
        "known": 0
    }
]
